1)program -> enternal_declaration | program external_declaration

2)external_declaration -> funciton_definition | declaraion

3)function_declaraion -> type_secifier declarator compound_statement

4)type_specifier -> VOID | CHAR | INT | FLOAT

5)declarator -> pointer direct_declarator | directdeclarator

6)pointer -> '*' | '*' pointer

7)direct_declarator -> IDENTIFIER | direct_declarator'['']' 
					  | direct_declarator'[' constant_expression ']' 
					  | IDENTIFIER'(' ')' | IDENTIFIER'(' parameter_list')'
					  | direct_declarator ',' identifirer_list

8)identifier_list -> : IDENTIFIER | identifier_list','IDENTIFIER

9)constant_expression -> conditional_expresion

10)parameter_list -> parameter_declaration | parameter_list ',' parameter_declaration

11)paramater_declaration -> declaration_specifiers IDENTIFIER

12)compound_statement -> '{''}' | '{' statement_list'}' | '{'declaration_list statement_list'}'

13)declaration_list -> declaration | declaration_list declaration

14)Declaration -> init_declarator | init_declarator_list','init_declarator

15)init_declarator -> declarator | declarator'='initializer

16)initializer -> assignment_expression | '{'initializer_list'}' | 'initializer_list',''}'

17)initializer_list -> initializer | initializer_list','initializer

18)statement_list -> statement | statement_list statement

19)statement -> compound_statement | expression_statement | selection_statement
			   | iteration_statement | jump_statement

20)expression_statement -> ';' | expression ';'

21)selection_statement -> IF'('expression')'statement | IF '(' expression')'statement ELSE statement

22)iteration_statement -> WHILE '('expression')' statement
						 | FOR'('expression_statement expression_statement')'statement
						 | FOR'('expression_statement expression_staatement expression_statement')'statement
23)jump_statement -> CONTINUE';' | BREAK';' | RETURN';' | RETURN expression';'

24)expression -> assignment_expression | expression','assignment_expression

25)assignment_expression -> conditional_expression
						   | unary_expression assignment_operator assignment_operator
26)conditional_expression -> logical_or_expression
						 	|logical_or_expression'?'expression':'conditional_expression

27)logical_or_expression -> logical_and_expression
						   |logical_or_expression OR_OP logical_and_expression

28)logical_and_expression -> inclusive_or_expression
							|logical_and_expression AND_OP inclusive_or_expression

29)inclusive_or_expression -> exclusive_or_expression
							 |inclusive_or_expression'|'exclusive_or_expression

30)exclusive_or_expression -> and_expression
							 |exclusive_or_expression'^'and_expression

31)and_expression -> equality_expression | and_expression '&'equality_expression

32)equality_expression -> relational_expression
						 |equality_expression EQ_OP relational_expression
						 |equality_expression NE_OP relational_expression

33)relational_expression -> shift_expression
						   | relational_expression'<'shift_expression
						   | relational_expression'>'shift_expression
						   | relational_expression LE_OP shift_expression
						   | relational_expression GE_OP shift_expression

34)shift_expression -> additive_expression
					  |shift_expression LEFT_OP additive_expression
					  |shift_expression RIGHT_OP additive_expression

35)additive_expression -> multiplicative_expression
						 |additive_expression'+'multiplicative_expression
						 |additive_expression'_'multiplicative_expression

36)multiplicative_expression -> cast_expression | multiplicative_expression'*'cast_expression
							   |multiplicative_expression'/'cast_expression 
							   |multiplicative_expression'%'cast_expression

37)cast_expression -> unary_expression | '('type_name')'cast_expression

38)unary_expression -> postfix_expression | INC_OP unary_expression | DEC_OP unary_expression
					  | unary_operator cast_expression | SIZEOF unary_expression | SIZEOF'('type_name')'

39)postfix_expression -> primary_expression | postfix_expression'['expression']' | postfix_expression'('')'
						| postfix_expression'('argument_expression_list')' | postfix_expression'.'IDENTIFIER
						| postfix_expression PTR_OP IDENTIFIER | postfix_expression INC_OP 
						| postfix_expression DEC_OP

40)primary_expression -> IDENTIFIER | CONSTANT | STRING_LITERAL | '('expression')'

41)argument_expression_list -> assignment_expression | argument_expression_list','assignment_expression

42)unary_operator -> '&' | '*' | '+' | '-' | '~' | '!'

43)assignment_operator -> '=' | MUL_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_ASSIGN
						 | RIGHT_ASSIGN | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN

44)storage_class_specifier -> TYPEDEF | EXTERN | STATIC | AUTO | REGISTER

45)srtuct_or_union_specifier -> struct_or_union IDENTIFIER'{'struct_declaration_list'}'
							   | struct_or_union'{'struct_declaration_list'}' | struct_or_union IDENTIFIER

46)struct_or_union -> STRUCT | UNION

47)struct_declaration_list -> struct_declaration | struct_declaration_list struct_declaration

48)struct_declaration -> specifier_qualifier_list struct_declarator_list';'

49)specifier_qualifier_list -> type_specifier specifier_qualifier_list | type_specifier 
							  | type_qualifier specifier_qualifier_list | type_qualifier

50)struct_declarator_list -> struct_declarator | struct_declarator_list','struct_declarator

51)struct_declarator -> declarator | ':'constant_expression | declarator':'constant_expression

52)enum_specifier -> ENUM'{'enumerator_list'}' | ENUM IDENTIFIER '{'enumerator_list'}' | ENUM IDENTIFIER

53)enumerator_list -> enumerator | enumerator_list ','enumerator

54)enumerator -> IDENTIFIER | IDENTIFIER'='constant_expression

55)type_qualifier -> CONST | VOLATILE

56)type_qualifier_list -> type_qualifier | type_qualifier_list type_qualifier

57)parameter_type_list -> parameter_list | parameter_list','ELLIPSIS

58)parameter_list -> parameter_declaration | parameter_list','parameter_declaration

59)type_name -> specifier_qualifier_list | specifier_qualifier_list abstract_declarator

60)abstract_declarator -> pointer | direct_abstract_declarator | pointer direct_abstract_declarator

61)direct_abstract_declarator -> '('abstract_declarator')' | '['']' | '['constant_expression']'
								| direct_abstract_declarator'['constant_expression']' | '('')'
								| '('parameter_type_list')' | direct_abstract_declarator'('')'
								| direct_abstract_declarator'('parameter_type_list')'

62)labeled_statement -> IDENTIFIER ':' statement | CASE constant_expression ':' statement | DEFAULT':'statement
